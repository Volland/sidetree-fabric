// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	protocolApi "github.com/trustbloc/sidetree-core-go/pkg/api/protocol"
	"github.com/trustbloc/sidetree-fabric/pkg/config"
	"github.com/trustbloc/sidetree-fabric/pkg/filehandler"
	"github.com/trustbloc/sidetree-fabric/pkg/rest/dcashandler"
)

type SidetreeConfigService struct {
	LoadProtocolsStub        func(namespace string) (map[string]protocolApi.Protocol, error)
	loadProtocolsMutex       sync.RWMutex
	loadProtocolsArgsForCall []struct {
		namespace string
	}
	loadProtocolsReturns struct {
		result1 map[string]protocolApi.Protocol
		result2 error
	}
	loadProtocolsReturnsOnCall map[int]struct {
		result1 map[string]protocolApi.Protocol
		result2 error
	}
	LoadSidetreeStub        func(namespace string) (config.Sidetree, error)
	loadSidetreeMutex       sync.RWMutex
	loadSidetreeArgsForCall []struct {
		namespace string
	}
	loadSidetreeReturns struct {
		result1 config.Sidetree
		result2 error
	}
	loadSidetreeReturnsOnCall map[int]struct {
		result1 config.Sidetree
		result2 error
	}
	LoadSidetreePeerStub        func(mspID, peerID string) (config.SidetreePeer, error)
	loadSidetreePeerMutex       sync.RWMutex
	loadSidetreePeerArgsForCall []struct {
		mspID  string
		peerID string
	}
	loadSidetreePeerReturns struct {
		result1 config.SidetreePeer
		result2 error
	}
	loadSidetreePeerReturnsOnCall map[int]struct {
		result1 config.SidetreePeer
		result2 error
	}
	LoadFileHandlersStub        func(mspID, peerID string) ([]filehandler.Config, error)
	loadFileHandlersMutex       sync.RWMutex
	loadFileHandlersArgsForCall []struct {
		mspID  string
		peerID string
	}
	loadFileHandlersReturns struct {
		result1 []filehandler.Config
		result2 error
	}
	loadFileHandlersReturnsOnCall map[int]struct {
		result1 []filehandler.Config
		result2 error
	}
	LoadDCASHandlersStub        func(mspID, peerID string) ([]dcashandler.Config, error)
	loadDCASHandlersMutex       sync.RWMutex
	loadDCASHandlersArgsForCall []struct {
		mspID  string
		peerID string
	}
	loadDCASHandlersReturns struct {
		result1 []dcashandler.Config
		result2 error
	}
	loadDCASHandlersReturnsOnCall map[int]struct {
		result1 []dcashandler.Config
		result2 error
	}
	LoadDCASStub        func() (config.DCAS, error)
	loadDCASMutex       sync.RWMutex
	loadDCASArgsForCall []struct{}
	loadDCASReturns     struct {
		result1 config.DCAS
		result2 error
	}
	loadDCASReturnsOnCall map[int]struct {
		result1 config.DCAS
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SidetreeConfigService) LoadProtocols(namespace string) (map[string]protocolApi.Protocol, error) {
	fake.loadProtocolsMutex.Lock()
	ret, specificReturn := fake.loadProtocolsReturnsOnCall[len(fake.loadProtocolsArgsForCall)]
	fake.loadProtocolsArgsForCall = append(fake.loadProtocolsArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("LoadProtocols", []interface{}{namespace})
	fake.loadProtocolsMutex.Unlock()
	if fake.LoadProtocolsStub != nil {
		return fake.LoadProtocolsStub(namespace)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadProtocolsReturns.result1, fake.loadProtocolsReturns.result2
}

func (fake *SidetreeConfigService) LoadProtocolsCallCount() int {
	fake.loadProtocolsMutex.RLock()
	defer fake.loadProtocolsMutex.RUnlock()
	return len(fake.loadProtocolsArgsForCall)
}

func (fake *SidetreeConfigService) LoadProtocolsArgsForCall(i int) string {
	fake.loadProtocolsMutex.RLock()
	defer fake.loadProtocolsMutex.RUnlock()
	return fake.loadProtocolsArgsForCall[i].namespace
}

func (fake *SidetreeConfigService) LoadProtocolsReturns(result1 map[string]protocolApi.Protocol, result2 error) {
	fake.LoadProtocolsStub = nil
	fake.loadProtocolsReturns = struct {
		result1 map[string]protocolApi.Protocol
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadProtocolsReturnsOnCall(i int, result1 map[string]protocolApi.Protocol, result2 error) {
	fake.LoadProtocolsStub = nil
	if fake.loadProtocolsReturnsOnCall == nil {
		fake.loadProtocolsReturnsOnCall = make(map[int]struct {
			result1 map[string]protocolApi.Protocol
			result2 error
		})
	}
	fake.loadProtocolsReturnsOnCall[i] = struct {
		result1 map[string]protocolApi.Protocol
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadSidetree(namespace string) (config.Sidetree, error) {
	fake.loadSidetreeMutex.Lock()
	ret, specificReturn := fake.loadSidetreeReturnsOnCall[len(fake.loadSidetreeArgsForCall)]
	fake.loadSidetreeArgsForCall = append(fake.loadSidetreeArgsForCall, struct {
		namespace string
	}{namespace})
	fake.recordInvocation("LoadSidetree", []interface{}{namespace})
	fake.loadSidetreeMutex.Unlock()
	if fake.LoadSidetreeStub != nil {
		return fake.LoadSidetreeStub(namespace)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadSidetreeReturns.result1, fake.loadSidetreeReturns.result2
}

func (fake *SidetreeConfigService) LoadSidetreeCallCount() int {
	fake.loadSidetreeMutex.RLock()
	defer fake.loadSidetreeMutex.RUnlock()
	return len(fake.loadSidetreeArgsForCall)
}

func (fake *SidetreeConfigService) LoadSidetreeArgsForCall(i int) string {
	fake.loadSidetreeMutex.RLock()
	defer fake.loadSidetreeMutex.RUnlock()
	return fake.loadSidetreeArgsForCall[i].namespace
}

func (fake *SidetreeConfigService) LoadSidetreeReturns(result1 config.Sidetree, result2 error) {
	fake.LoadSidetreeStub = nil
	fake.loadSidetreeReturns = struct {
		result1 config.Sidetree
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadSidetreeReturnsOnCall(i int, result1 config.Sidetree, result2 error) {
	fake.LoadSidetreeStub = nil
	if fake.loadSidetreeReturnsOnCall == nil {
		fake.loadSidetreeReturnsOnCall = make(map[int]struct {
			result1 config.Sidetree
			result2 error
		})
	}
	fake.loadSidetreeReturnsOnCall[i] = struct {
		result1 config.Sidetree
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadSidetreePeer(mspID string, peerID string) (config.SidetreePeer, error) {
	fake.loadSidetreePeerMutex.Lock()
	ret, specificReturn := fake.loadSidetreePeerReturnsOnCall[len(fake.loadSidetreePeerArgsForCall)]
	fake.loadSidetreePeerArgsForCall = append(fake.loadSidetreePeerArgsForCall, struct {
		mspID  string
		peerID string
	}{mspID, peerID})
	fake.recordInvocation("LoadSidetreePeer", []interface{}{mspID, peerID})
	fake.loadSidetreePeerMutex.Unlock()
	if fake.LoadSidetreePeerStub != nil {
		return fake.LoadSidetreePeerStub(mspID, peerID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadSidetreePeerReturns.result1, fake.loadSidetreePeerReturns.result2
}

func (fake *SidetreeConfigService) LoadSidetreePeerCallCount() int {
	fake.loadSidetreePeerMutex.RLock()
	defer fake.loadSidetreePeerMutex.RUnlock()
	return len(fake.loadSidetreePeerArgsForCall)
}

func (fake *SidetreeConfigService) LoadSidetreePeerArgsForCall(i int) (string, string) {
	fake.loadSidetreePeerMutex.RLock()
	defer fake.loadSidetreePeerMutex.RUnlock()
	return fake.loadSidetreePeerArgsForCall[i].mspID, fake.loadSidetreePeerArgsForCall[i].peerID
}

func (fake *SidetreeConfigService) LoadSidetreePeerReturns(result1 config.SidetreePeer, result2 error) {
	fake.LoadSidetreePeerStub = nil
	fake.loadSidetreePeerReturns = struct {
		result1 config.SidetreePeer
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadSidetreePeerReturnsOnCall(i int, result1 config.SidetreePeer, result2 error) {
	fake.LoadSidetreePeerStub = nil
	if fake.loadSidetreePeerReturnsOnCall == nil {
		fake.loadSidetreePeerReturnsOnCall = make(map[int]struct {
			result1 config.SidetreePeer
			result2 error
		})
	}
	fake.loadSidetreePeerReturnsOnCall[i] = struct {
		result1 config.SidetreePeer
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadFileHandlers(mspID string, peerID string) ([]filehandler.Config, error) {
	fake.loadFileHandlersMutex.Lock()
	ret, specificReturn := fake.loadFileHandlersReturnsOnCall[len(fake.loadFileHandlersArgsForCall)]
	fake.loadFileHandlersArgsForCall = append(fake.loadFileHandlersArgsForCall, struct {
		mspID  string
		peerID string
	}{mspID, peerID})
	fake.recordInvocation("LoadFileHandlers", []interface{}{mspID, peerID})
	fake.loadFileHandlersMutex.Unlock()
	if fake.LoadFileHandlersStub != nil {
		return fake.LoadFileHandlersStub(mspID, peerID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadFileHandlersReturns.result1, fake.loadFileHandlersReturns.result2
}

func (fake *SidetreeConfigService) LoadFileHandlersCallCount() int {
	fake.loadFileHandlersMutex.RLock()
	defer fake.loadFileHandlersMutex.RUnlock()
	return len(fake.loadFileHandlersArgsForCall)
}

func (fake *SidetreeConfigService) LoadFileHandlersArgsForCall(i int) (string, string) {
	fake.loadFileHandlersMutex.RLock()
	defer fake.loadFileHandlersMutex.RUnlock()
	return fake.loadFileHandlersArgsForCall[i].mspID, fake.loadFileHandlersArgsForCall[i].peerID
}

func (fake *SidetreeConfigService) LoadFileHandlersReturns(result1 []filehandler.Config, result2 error) {
	fake.LoadFileHandlersStub = nil
	fake.loadFileHandlersReturns = struct {
		result1 []filehandler.Config
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadFileHandlersReturnsOnCall(i int, result1 []filehandler.Config, result2 error) {
	fake.LoadFileHandlersStub = nil
	if fake.loadFileHandlersReturnsOnCall == nil {
		fake.loadFileHandlersReturnsOnCall = make(map[int]struct {
			result1 []filehandler.Config
			result2 error
		})
	}
	fake.loadFileHandlersReturnsOnCall[i] = struct {
		result1 []filehandler.Config
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadDCASHandlers(mspID string, peerID string) ([]dcashandler.Config, error) {
	fake.loadDCASHandlersMutex.Lock()
	ret, specificReturn := fake.loadDCASHandlersReturnsOnCall[len(fake.loadDCASHandlersArgsForCall)]
	fake.loadDCASHandlersArgsForCall = append(fake.loadDCASHandlersArgsForCall, struct {
		mspID  string
		peerID string
	}{mspID, peerID})
	fake.recordInvocation("LoadDCASHandlers", []interface{}{mspID, peerID})
	fake.loadDCASHandlersMutex.Unlock()
	if fake.LoadDCASHandlersStub != nil {
		return fake.LoadDCASHandlersStub(mspID, peerID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadDCASHandlersReturns.result1, fake.loadDCASHandlersReturns.result2
}

func (fake *SidetreeConfigService) LoadDCASHandlersCallCount() int {
	fake.loadDCASHandlersMutex.RLock()
	defer fake.loadDCASHandlersMutex.RUnlock()
	return len(fake.loadDCASHandlersArgsForCall)
}

func (fake *SidetreeConfigService) LoadDCASHandlersArgsForCall(i int) (string, string) {
	fake.loadDCASHandlersMutex.RLock()
	defer fake.loadDCASHandlersMutex.RUnlock()
	return fake.loadDCASHandlersArgsForCall[i].mspID, fake.loadDCASHandlersArgsForCall[i].peerID
}

func (fake *SidetreeConfigService) LoadDCASHandlersReturns(result1 []dcashandler.Config, result2 error) {
	fake.LoadDCASHandlersStub = nil
	fake.loadDCASHandlersReturns = struct {
		result1 []dcashandler.Config
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadDCASHandlersReturnsOnCall(i int, result1 []dcashandler.Config, result2 error) {
	fake.LoadDCASHandlersStub = nil
	if fake.loadDCASHandlersReturnsOnCall == nil {
		fake.loadDCASHandlersReturnsOnCall = make(map[int]struct {
			result1 []dcashandler.Config
			result2 error
		})
	}
	fake.loadDCASHandlersReturnsOnCall[i] = struct {
		result1 []dcashandler.Config
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadDCAS() (config.DCAS, error) {
	fake.loadDCASMutex.Lock()
	ret, specificReturn := fake.loadDCASReturnsOnCall[len(fake.loadDCASArgsForCall)]
	fake.loadDCASArgsForCall = append(fake.loadDCASArgsForCall, struct{}{})
	fake.recordInvocation("LoadDCAS", []interface{}{})
	fake.loadDCASMutex.Unlock()
	if fake.LoadDCASStub != nil {
		return fake.LoadDCASStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.loadDCASReturns.result1, fake.loadDCASReturns.result2
}

func (fake *SidetreeConfigService) LoadDCASCallCount() int {
	fake.loadDCASMutex.RLock()
	defer fake.loadDCASMutex.RUnlock()
	return len(fake.loadDCASArgsForCall)
}

func (fake *SidetreeConfigService) LoadDCASReturns(result1 config.DCAS, result2 error) {
	fake.LoadDCASStub = nil
	fake.loadDCASReturns = struct {
		result1 config.DCAS
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) LoadDCASReturnsOnCall(i int, result1 config.DCAS, result2 error) {
	fake.LoadDCASStub = nil
	if fake.loadDCASReturnsOnCall == nil {
		fake.loadDCASReturnsOnCall = make(map[int]struct {
			result1 config.DCAS
			result2 error
		})
	}
	fake.loadDCASReturnsOnCall[i] = struct {
		result1 config.DCAS
		result2 error
	}{result1, result2}
}

func (fake *SidetreeConfigService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loadProtocolsMutex.RLock()
	defer fake.loadProtocolsMutex.RUnlock()
	fake.loadSidetreeMutex.RLock()
	defer fake.loadSidetreeMutex.RUnlock()
	fake.loadSidetreePeerMutex.RLock()
	defer fake.loadSidetreePeerMutex.RUnlock()
	fake.loadFileHandlersMutex.RLock()
	defer fake.loadFileHandlersMutex.RUnlock()
	fake.loadDCASHandlersMutex.RLock()
	defer fake.loadDCASHandlersMutex.RUnlock()
	fake.loadDCASMutex.RLock()
	defer fake.loadDCASMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SidetreeConfigService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.SidetreeService = new(SidetreeConfigService)
