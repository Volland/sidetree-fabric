// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	dcasclient "github.com/trustbloc/fabric-peer-ext/pkg/collections/offledger/dcas/client"
	"github.com/trustbloc/sidetree-fabric/pkg/observer/common"
)

type DCASClientProvider struct {
	GetDCASClientStub        func(channelID string, namespace string, coll string) (dcasclient.DCAS, error)
	getDCASClientMutex       sync.RWMutex
	getDCASClientArgsForCall []struct {
		channelID string
		namespace string
		coll      string
	}
	getDCASClientReturns struct {
		result1 dcasclient.DCAS
		result2 error
	}
	getDCASClientReturnsOnCall map[int]struct {
		result1 dcasclient.DCAS
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DCASClientProvider) GetDCASClient(channelID string, namespace string, coll string) (dcasclient.DCAS, error) {
	fake.getDCASClientMutex.Lock()
	ret, specificReturn := fake.getDCASClientReturnsOnCall[len(fake.getDCASClientArgsForCall)]
	fake.getDCASClientArgsForCall = append(fake.getDCASClientArgsForCall, struct {
		channelID string
		namespace string
		coll      string
	}{channelID, namespace, coll})
	fake.recordInvocation("GetDCASClient", []interface{}{channelID, namespace, coll})
	fake.getDCASClientMutex.Unlock()
	if fake.GetDCASClientStub != nil {
		return fake.GetDCASClientStub(channelID, namespace, coll)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDCASClientReturns.result1, fake.getDCASClientReturns.result2
}

func (fake *DCASClientProvider) GetDCASClientCallCount() int {
	fake.getDCASClientMutex.RLock()
	defer fake.getDCASClientMutex.RUnlock()
	return len(fake.getDCASClientArgsForCall)
}

func (fake *DCASClientProvider) GetDCASClientArgsForCall(i int) (string, string, string) {
	fake.getDCASClientMutex.RLock()
	defer fake.getDCASClientMutex.RUnlock()
	return fake.getDCASClientArgsForCall[i].channelID, fake.getDCASClientArgsForCall[i].namespace, fake.getDCASClientArgsForCall[i].coll
}

func (fake *DCASClientProvider) GetDCASClientReturns(result1 dcasclient.DCAS, result2 error) {
	fake.GetDCASClientStub = nil
	fake.getDCASClientReturns = struct {
		result1 dcasclient.DCAS
		result2 error
	}{result1, result2}
}

func (fake *DCASClientProvider) GetDCASClientReturnsOnCall(i int, result1 dcasclient.DCAS, result2 error) {
	fake.GetDCASClientStub = nil
	if fake.getDCASClientReturnsOnCall == nil {
		fake.getDCASClientReturnsOnCall = make(map[int]struct {
			result1 dcasclient.DCAS
			result2 error
		})
	}
	fake.getDCASClientReturnsOnCall[i] = struct {
		result1 dcasclient.DCAS
		result2 error
	}{result1, result2}
}

func (fake *DCASClientProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDCASClientMutex.RLock()
	defer fake.getDCASClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DCASClientProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.DCASClientProvider = new(DCASClientProvider)
