// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-core-go/pkg/api/batch"
	"github.com/trustbloc/sidetree-fabric/pkg/context/common"
)

type OperationStore struct {
	GetStub        func(suffix string) ([]*batch.Operation, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		suffix string
	}
	getReturns struct {
		result1 []*batch.Operation
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 []*batch.Operation
		result2 error
	}
	PutStub        func(ops []*batch.Operation) error
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		ops []*batch.Operation
	}
	putReturns struct {
		result1 error
	}
	putReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OperationStore) Get(suffix string) ([]*batch.Operation, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		suffix string
	}{suffix})
	fake.recordInvocation("Get", []interface{}{suffix})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(suffix)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *OperationStore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *OperationStore) GetArgsForCall(i int) string {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].suffix
}

func (fake *OperationStore) GetReturns(result1 []*batch.Operation, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 []*batch.Operation
		result2 error
	}{result1, result2}
}

func (fake *OperationStore) GetReturnsOnCall(i int, result1 []*batch.Operation, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 []*batch.Operation
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 []*batch.Operation
		result2 error
	}{result1, result2}
}

func (fake *OperationStore) Put(ops []*batch.Operation) error {
	var opsCopy []*batch.Operation
	if ops != nil {
		opsCopy = make([]*batch.Operation, len(ops))
		copy(opsCopy, ops)
	}
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		ops []*batch.Operation
	}{opsCopy})
	fake.recordInvocation("Put", []interface{}{opsCopy})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(ops)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.putReturns.result1
}

func (fake *OperationStore) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *OperationStore) PutArgsForCall(i int) []*batch.Operation {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return fake.putArgsForCall[i].ops
}

func (fake *OperationStore) PutReturns(result1 error) {
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 error
	}{result1}
}

func (fake *OperationStore) PutReturnsOnCall(i int, result1 error) {
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *OperationStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OperationStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ common.OperationStore = new(OperationStore)
