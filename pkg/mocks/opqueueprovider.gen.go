// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-core-go/pkg/batch/cutter"
)

type OperationQueueProvider struct {
	CreateStub        func(channelID string, namespace string) (cutter.OperationQueue, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		channelID string
		namespace string
	}
	createReturns struct {
		result1 cutter.OperationQueue
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 cutter.OperationQueue
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OperationQueueProvider) Create(channelID string, namespace string) (cutter.OperationQueue, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		channelID string
		namespace string
	}{channelID, namespace})
	fake.recordInvocation("Create", []interface{}{channelID, namespace})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(channelID, namespace)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReturns.result1, fake.createReturns.result2
}

func (fake *OperationQueueProvider) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *OperationQueueProvider) CreateArgsForCall(i int) (string, string) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].channelID, fake.createArgsForCall[i].namespace
}

func (fake *OperationQueueProvider) CreateReturns(result1 cutter.OperationQueue, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 cutter.OperationQueue
		result2 error
	}{result1, result2}
}

func (fake *OperationQueueProvider) CreateReturnsOnCall(i int, result1 cutter.OperationQueue, result2 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 cutter.OperationQueue
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 cutter.OperationQueue
		result2 error
	}{result1, result2}
}

func (fake *OperationQueueProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OperationQueueProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
