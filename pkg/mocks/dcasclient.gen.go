// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"io"
	"sync"

	"github.com/trustbloc/fabric-peer-ext/pkg/collections/offledger/dcas/client"
)

type DCASClient struct {
	PutStub        func(data io.Reader, opts ...client.Option) (string, error)
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		data io.Reader
		opts []client.Option
	}
	putReturns struct {
		result1 string
		result2 error
	}
	putReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DeleteStub        func(cids ...string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		cids []string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(cid string, w io.Writer) error
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		cid string
		w   io.Writer
	}
	getReturns struct {
		result1 error
	}
	getReturnsOnCall map[int]struct {
		result1 error
	}
	GetNodeStub        func(cid string) (*client.Node, error)
	getNodeMutex       sync.RWMutex
	getNodeArgsForCall []struct {
		cid string
	}
	getNodeReturns struct {
		result1 *client.Node
		result2 error
	}
	getNodeReturnsOnCall map[int]struct {
		result1 *client.Node
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DCASClient) Put(data io.Reader, opts ...client.Option) (string, error) {
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		data io.Reader
		opts []client.Option
	}{data, opts})
	fake.recordInvocation("Put", []interface{}{data, opts})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(data, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.putReturns.result1, fake.putReturns.result2
}

func (fake *DCASClient) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *DCASClient) PutArgsForCall(i int) (io.Reader, []client.Option) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return fake.putArgsForCall[i].data, fake.putArgsForCall[i].opts
}

func (fake *DCASClient) PutReturns(result1 string, result2 error) {
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DCASClient) PutReturnsOnCall(i int, result1 string, result2 error) {
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *DCASClient) Delete(cids ...string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		cids []string
	}{cids})
	fake.recordInvocation("Delete", []interface{}{cids})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(cids...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *DCASClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *DCASClient) DeleteArgsForCall(i int) []string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].cids
}

func (fake *DCASClient) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *DCASClient) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DCASClient) Get(cid string, w io.Writer) error {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		cid string
		w   io.Writer
	}{cid, w})
	fake.recordInvocation("Get", []interface{}{cid, w})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(cid, w)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getReturns.result1
}

func (fake *DCASClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *DCASClient) GetArgsForCall(i int) (string, io.Writer) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].cid, fake.getArgsForCall[i].w
}

func (fake *DCASClient) GetReturns(result1 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 error
	}{result1}
}

func (fake *DCASClient) GetReturnsOnCall(i int, result1 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DCASClient) GetNode(cid string) (*client.Node, error) {
	fake.getNodeMutex.Lock()
	ret, specificReturn := fake.getNodeReturnsOnCall[len(fake.getNodeArgsForCall)]
	fake.getNodeArgsForCall = append(fake.getNodeArgsForCall, struct {
		cid string
	}{cid})
	fake.recordInvocation("GetNode", []interface{}{cid})
	fake.getNodeMutex.Unlock()
	if fake.GetNodeStub != nil {
		return fake.GetNodeStub(cid)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getNodeReturns.result1, fake.getNodeReturns.result2
}

func (fake *DCASClient) GetNodeCallCount() int {
	fake.getNodeMutex.RLock()
	defer fake.getNodeMutex.RUnlock()
	return len(fake.getNodeArgsForCall)
}

func (fake *DCASClient) GetNodeArgsForCall(i int) string {
	fake.getNodeMutex.RLock()
	defer fake.getNodeMutex.RUnlock()
	return fake.getNodeArgsForCall[i].cid
}

func (fake *DCASClient) GetNodeReturns(result1 *client.Node, result2 error) {
	fake.GetNodeStub = nil
	fake.getNodeReturns = struct {
		result1 *client.Node
		result2 error
	}{result1, result2}
}

func (fake *DCASClient) GetNodeReturnsOnCall(i int, result1 *client.Node, result2 error) {
	fake.GetNodeStub = nil
	if fake.getNodeReturnsOnCall == nil {
		fake.getNodeReturnsOnCall = make(map[int]struct {
			result1 *client.Node
			result2 error
		})
	}
	fake.getNodeReturnsOnCall[i] = struct {
		result1 *client.Node
		result2 error
	}{result1, result2}
}

func (fake *DCASClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getNodeMutex.RLock()
	defer fake.getNodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DCASClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.DCAS = new(DCASClient)
