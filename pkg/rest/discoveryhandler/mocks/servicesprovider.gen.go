// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-fabric/pkg/peer/discovery"
)

type ServicesProvider struct {
	ServicesForChannelStub        func(channelID string) []discovery.Service
	servicesForChannelMutex       sync.RWMutex
	servicesForChannelArgsForCall []struct {
		channelID string
	}
	servicesForChannelReturns struct {
		result1 []discovery.Service
	}
	servicesForChannelReturnsOnCall map[int]struct {
		result1 []discovery.Service
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ServicesProvider) ServicesForChannel(channelID string) []discovery.Service {
	fake.servicesForChannelMutex.Lock()
	ret, specificReturn := fake.servicesForChannelReturnsOnCall[len(fake.servicesForChannelArgsForCall)]
	fake.servicesForChannelArgsForCall = append(fake.servicesForChannelArgsForCall, struct {
		channelID string
	}{channelID})
	fake.recordInvocation("ServicesForChannel", []interface{}{channelID})
	fake.servicesForChannelMutex.Unlock()
	if fake.ServicesForChannelStub != nil {
		return fake.ServicesForChannelStub(channelID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.servicesForChannelReturns.result1
}

func (fake *ServicesProvider) ServicesForChannelCallCount() int {
	fake.servicesForChannelMutex.RLock()
	defer fake.servicesForChannelMutex.RUnlock()
	return len(fake.servicesForChannelArgsForCall)
}

func (fake *ServicesProvider) ServicesForChannelArgsForCall(i int) string {
	fake.servicesForChannelMutex.RLock()
	defer fake.servicesForChannelMutex.RUnlock()
	return fake.servicesForChannelArgsForCall[i].channelID
}

func (fake *ServicesProvider) ServicesForChannelReturns(result1 []discovery.Service) {
	fake.ServicesForChannelStub = nil
	fake.servicesForChannelReturns = struct {
		result1 []discovery.Service
	}{result1}
}

func (fake *ServicesProvider) ServicesForChannelReturnsOnCall(i int, result1 []discovery.Service) {
	fake.ServicesForChannelStub = nil
	if fake.servicesForChannelReturnsOnCall == nil {
		fake.servicesForChannelReturnsOnCall = make(map[int]struct {
			result1 []discovery.Service
		})
	}
	fake.servicesForChannelReturnsOnCall[i] = struct {
		result1 []discovery.Service
	}{result1}
}

func (fake *ServicesProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.servicesForChannelMutex.RLock()
	defer fake.servicesForChannelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ServicesProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
