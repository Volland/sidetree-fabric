// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"
)

type Cache struct {
	GetStub        func(interface{}) (interface{}, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 interface{}
	}
	getReturns struct {
		result1 interface{}
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	HasStub        func(interface{}) bool
	hasMutex       sync.RWMutex
	hasArgsForCall []struct {
		arg1 interface{}
	}
	hasReturns struct {
		result1 bool
	}
	hasReturnsOnCall map[int]struct {
		result1 bool
	}
	SetStub        func(interface{}, interface{}) error
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		arg1 interface{}
		arg2 interface{}
	}
	setReturns struct {
		result1 error
	}
	setReturnsOnCall map[int]struct {
		result1 error
	}
	SetWithExpireStub        func(interface{}, interface{}, time.Duration) error
	setWithExpireMutex       sync.RWMutex
	setWithExpireArgsForCall []struct {
		arg1 interface{}
		arg2 interface{}
		arg3 time.Duration
	}
	setWithExpireReturns struct {
		result1 error
	}
	setWithExpireReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Cache) Get(arg1 interface{}) (interface{}, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Get", []interface{}{arg1})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Cache) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *Cache) GetCalls(stub func(interface{}) (interface{}, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *Cache) GetArgsForCall(i int) interface{} {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Cache) GetReturns(result1 interface{}, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *Cache) GetReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *Cache) Has(arg1 interface{}) bool {
	fake.hasMutex.Lock()
	ret, specificReturn := fake.hasReturnsOnCall[len(fake.hasArgsForCall)]
	fake.hasArgsForCall = append(fake.hasArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("Has", []interface{}{arg1})
	fake.hasMutex.Unlock()
	if fake.HasStub != nil {
		return fake.HasStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.hasReturns
	return fakeReturns.result1
}

func (fake *Cache) HasCallCount() int {
	fake.hasMutex.RLock()
	defer fake.hasMutex.RUnlock()
	return len(fake.hasArgsForCall)
}

func (fake *Cache) HasCalls(stub func(interface{}) bool) {
	fake.hasMutex.Lock()
	defer fake.hasMutex.Unlock()
	fake.HasStub = stub
}

func (fake *Cache) HasArgsForCall(i int) interface{} {
	fake.hasMutex.RLock()
	defer fake.hasMutex.RUnlock()
	argsForCall := fake.hasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Cache) HasReturns(result1 bool) {
	fake.hasMutex.Lock()
	defer fake.hasMutex.Unlock()
	fake.HasStub = nil
	fake.hasReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Cache) HasReturnsOnCall(i int, result1 bool) {
	fake.hasMutex.Lock()
	defer fake.hasMutex.Unlock()
	fake.HasStub = nil
	if fake.hasReturnsOnCall == nil {
		fake.hasReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *Cache) Set(arg1 interface{}, arg2 interface{}) error {
	fake.setMutex.Lock()
	ret, specificReturn := fake.setReturnsOnCall[len(fake.setArgsForCall)]
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		arg1 interface{}
		arg2 interface{}
	}{arg1, arg2})
	fake.recordInvocation("Set", []interface{}{arg1, arg2})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		return fake.SetStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setReturns
	return fakeReturns.result1
}

func (fake *Cache) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *Cache) SetCalls(stub func(interface{}, interface{}) error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = stub
}

func (fake *Cache) SetArgsForCall(i int) (interface{}, interface{}) {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	argsForCall := fake.setArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Cache) SetReturns(result1 error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 error
	}{result1}
}

func (fake *Cache) SetReturnsOnCall(i int, result1 error) {
	fake.setMutex.Lock()
	defer fake.setMutex.Unlock()
	fake.SetStub = nil
	if fake.setReturnsOnCall == nil {
		fake.setReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Cache) SetWithExpire(arg1 interface{}, arg2 interface{}, arg3 time.Duration) error {
	fake.setWithExpireMutex.Lock()
	ret, specificReturn := fake.setWithExpireReturnsOnCall[len(fake.setWithExpireArgsForCall)]
	fake.setWithExpireArgsForCall = append(fake.setWithExpireArgsForCall, struct {
		arg1 interface{}
		arg2 interface{}
		arg3 time.Duration
	}{arg1, arg2, arg3})
	fake.recordInvocation("SetWithExpire", []interface{}{arg1, arg2, arg3})
	fake.setWithExpireMutex.Unlock()
	if fake.SetWithExpireStub != nil {
		return fake.SetWithExpireStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setWithExpireReturns
	return fakeReturns.result1
}

func (fake *Cache) SetWithExpireCallCount() int {
	fake.setWithExpireMutex.RLock()
	defer fake.setWithExpireMutex.RUnlock()
	return len(fake.setWithExpireArgsForCall)
}

func (fake *Cache) SetWithExpireCalls(stub func(interface{}, interface{}, time.Duration) error) {
	fake.setWithExpireMutex.Lock()
	defer fake.setWithExpireMutex.Unlock()
	fake.SetWithExpireStub = stub
}

func (fake *Cache) SetWithExpireArgsForCall(i int) (interface{}, interface{}, time.Duration) {
	fake.setWithExpireMutex.RLock()
	defer fake.setWithExpireMutex.RUnlock()
	argsForCall := fake.setWithExpireArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *Cache) SetWithExpireReturns(result1 error) {
	fake.setWithExpireMutex.Lock()
	defer fake.setWithExpireMutex.Unlock()
	fake.SetWithExpireStub = nil
	fake.setWithExpireReturns = struct {
		result1 error
	}{result1}
}

func (fake *Cache) SetWithExpireReturnsOnCall(i int, result1 error) {
	fake.setWithExpireMutex.Lock()
	defer fake.setWithExpireMutex.Unlock()
	fake.SetWithExpireStub = nil
	if fake.setWithExpireReturnsOnCall == nil {
		fake.setWithExpireReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setWithExpireReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Cache) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.hasMutex.RLock()
	defer fake.hasMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	fake.setWithExpireMutex.RLock()
	defer fake.setWithExpireMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Cache) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
