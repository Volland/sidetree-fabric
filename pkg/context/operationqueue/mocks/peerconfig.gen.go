// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
)

type PeerConfig struct {
	LevelDBOpQueueBasePathStub        func() string
	levelDBOpQueueBasePathMutex       sync.RWMutex
	levelDBOpQueueBasePathArgsForCall []struct{}
	levelDBOpQueueBasePathReturns     struct {
		result1 string
	}
	levelDBOpQueueBasePathReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PeerConfig) LevelDBOpQueueBasePath() string {
	fake.levelDBOpQueueBasePathMutex.Lock()
	ret, specificReturn := fake.levelDBOpQueueBasePathReturnsOnCall[len(fake.levelDBOpQueueBasePathArgsForCall)]
	fake.levelDBOpQueueBasePathArgsForCall = append(fake.levelDBOpQueueBasePathArgsForCall, struct{}{})
	fake.recordInvocation("LevelDBOpQueueBasePath", []interface{}{})
	fake.levelDBOpQueueBasePathMutex.Unlock()
	if fake.LevelDBOpQueueBasePathStub != nil {
		return fake.LevelDBOpQueueBasePathStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.levelDBOpQueueBasePathReturns.result1
}

func (fake *PeerConfig) LevelDBOpQueueBasePathCallCount() int {
	fake.levelDBOpQueueBasePathMutex.RLock()
	defer fake.levelDBOpQueueBasePathMutex.RUnlock()
	return len(fake.levelDBOpQueueBasePathArgsForCall)
}

func (fake *PeerConfig) LevelDBOpQueueBasePathReturns(result1 string) {
	fake.LevelDBOpQueueBasePathStub = nil
	fake.levelDBOpQueueBasePathReturns = struct {
		result1 string
	}{result1}
}

func (fake *PeerConfig) LevelDBOpQueueBasePathReturnsOnCall(i int, result1 string) {
	fake.LevelDBOpQueueBasePathStub = nil
	if fake.levelDBOpQueueBasePathReturnsOnCall == nil {
		fake.levelDBOpQueueBasePathReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.levelDBOpQueueBasePathReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *PeerConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.levelDBOpQueueBasePathMutex.RLock()
	defer fake.levelDBOpQueueBasePathMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PeerConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
