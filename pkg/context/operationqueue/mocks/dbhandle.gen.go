// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/syndtr/goleveldb/leveldb/iterator"
	"github.com/syndtr/goleveldb/leveldb/opt"
	"github.com/syndtr/goleveldb/leveldb/util"
)

type DBHandle struct {
	PutStub        func(key, value []byte, wo *opt.WriteOptions) error
	putMutex       sync.RWMutex
	putArgsForCall []struct {
		key   []byte
		value []byte
		wo    *opt.WriteOptions
	}
	putReturns struct {
		result1 error
	}
	putReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(key []byte, wo *opt.WriteOptions) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		key []byte
		wo  *opt.WriteOptions
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	NewIteratorStub        func(slice *util.Range, ro *opt.ReadOptions) iterator.Iterator
	newIteratorMutex       sync.RWMutex
	newIteratorArgsForCall []struct {
		slice *util.Range
		ro    *opt.ReadOptions
	}
	newIteratorReturns struct {
		result1 iterator.Iterator
	}
	newIteratorReturnsOnCall map[int]struct {
		result1 iterator.Iterator
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DBHandle) Put(key []byte, value []byte, wo *opt.WriteOptions) error {
	var keyCopy []byte
	if key != nil {
		keyCopy = make([]byte, len(key))
		copy(keyCopy, key)
	}
	var valueCopy []byte
	if value != nil {
		valueCopy = make([]byte, len(value))
		copy(valueCopy, value)
	}
	fake.putMutex.Lock()
	ret, specificReturn := fake.putReturnsOnCall[len(fake.putArgsForCall)]
	fake.putArgsForCall = append(fake.putArgsForCall, struct {
		key   []byte
		value []byte
		wo    *opt.WriteOptions
	}{keyCopy, valueCopy, wo})
	fake.recordInvocation("Put", []interface{}{keyCopy, valueCopy, wo})
	fake.putMutex.Unlock()
	if fake.PutStub != nil {
		return fake.PutStub(key, value, wo)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.putReturns.result1
}

func (fake *DBHandle) PutCallCount() int {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return len(fake.putArgsForCall)
}

func (fake *DBHandle) PutArgsForCall(i int) ([]byte, []byte, *opt.WriteOptions) {
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	return fake.putArgsForCall[i].key, fake.putArgsForCall[i].value, fake.putArgsForCall[i].wo
}

func (fake *DBHandle) PutReturns(result1 error) {
	fake.PutStub = nil
	fake.putReturns = struct {
		result1 error
	}{result1}
}

func (fake *DBHandle) PutReturnsOnCall(i int, result1 error) {
	fake.PutStub = nil
	if fake.putReturnsOnCall == nil {
		fake.putReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DBHandle) Delete(key []byte, wo *opt.WriteOptions) error {
	var keyCopy []byte
	if key != nil {
		keyCopy = make([]byte, len(key))
		copy(keyCopy, key)
	}
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		key []byte
		wo  *opt.WriteOptions
	}{keyCopy, wo})
	fake.recordInvocation("Delete", []interface{}{keyCopy, wo})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(key, wo)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *DBHandle) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *DBHandle) DeleteArgsForCall(i int) ([]byte, *opt.WriteOptions) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].key, fake.deleteArgsForCall[i].wo
}

func (fake *DBHandle) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *DBHandle) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DBHandle) NewIterator(slice *util.Range, ro *opt.ReadOptions) iterator.Iterator {
	fake.newIteratorMutex.Lock()
	ret, specificReturn := fake.newIteratorReturnsOnCall[len(fake.newIteratorArgsForCall)]
	fake.newIteratorArgsForCall = append(fake.newIteratorArgsForCall, struct {
		slice *util.Range
		ro    *opt.ReadOptions
	}{slice, ro})
	fake.recordInvocation("NewIterator", []interface{}{slice, ro})
	fake.newIteratorMutex.Unlock()
	if fake.NewIteratorStub != nil {
		return fake.NewIteratorStub(slice, ro)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.newIteratorReturns.result1
}

func (fake *DBHandle) NewIteratorCallCount() int {
	fake.newIteratorMutex.RLock()
	defer fake.newIteratorMutex.RUnlock()
	return len(fake.newIteratorArgsForCall)
}

func (fake *DBHandle) NewIteratorArgsForCall(i int) (*util.Range, *opt.ReadOptions) {
	fake.newIteratorMutex.RLock()
	defer fake.newIteratorMutex.RUnlock()
	return fake.newIteratorArgsForCall[i].slice, fake.newIteratorArgsForCall[i].ro
}

func (fake *DBHandle) NewIteratorReturns(result1 iterator.Iterator) {
	fake.NewIteratorStub = nil
	fake.newIteratorReturns = struct {
		result1 iterator.Iterator
	}{result1}
}

func (fake *DBHandle) NewIteratorReturnsOnCall(i int, result1 iterator.Iterator) {
	fake.NewIteratorStub = nil
	if fake.newIteratorReturnsOnCall == nil {
		fake.newIteratorReturnsOnCall = make(map[int]struct {
			result1 iterator.Iterator
		})
	}
	fake.newIteratorReturnsOnCall[i] = struct {
		result1 iterator.Iterator
	}{result1}
}

func (fake *DBHandle) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.closeReturns.result1
}

func (fake *DBHandle) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *DBHandle) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *DBHandle) CloseReturnsOnCall(i int, result1 error) {
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DBHandle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.putMutex.RLock()
	defer fake.putMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.newIteratorMutex.RLock()
	defer fake.newIteratorMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DBHandle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
