// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-fabric/pkg/context/doccache"
)

type DocCacheInvalidator struct {
	InvalidateStub        func(uniqueSuffix string)
	invalidateMutex       sync.RWMutex
	invalidateArgsForCall []struct {
		uniqueSuffix string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DocCacheInvalidator) Invalidate(uniqueSuffix string) {
	fake.invalidateMutex.Lock()
	fake.invalidateArgsForCall = append(fake.invalidateArgsForCall, struct {
		uniqueSuffix string
	}{uniqueSuffix})
	fake.recordInvocation("Invalidate", []interface{}{uniqueSuffix})
	fake.invalidateMutex.Unlock()
	if fake.InvalidateStub != nil {
		fake.InvalidateStub(uniqueSuffix)
	}
}

func (fake *DocCacheInvalidator) InvalidateCallCount() int {
	fake.invalidateMutex.RLock()
	defer fake.invalidateMutex.RUnlock()
	return len(fake.invalidateArgsForCall)
}

func (fake *DocCacheInvalidator) InvalidateArgsForCall(i int) string {
	fake.invalidateMutex.RLock()
	defer fake.invalidateMutex.RUnlock()
	return fake.invalidateArgsForCall[i].uniqueSuffix
}

func (fake *DocCacheInvalidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.invalidateMutex.RLock()
	defer fake.invalidateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DocCacheInvalidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ doccache.Invalidator = new(DocCacheInvalidator)
