// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-fabric/pkg/context/doccache"
)

type DocCacheInvalidatorProvider struct {
	GetDocumentInvalidatorStub        func(channelID, namespace string) (doccache.Invalidator, error)
	getDocumentInvalidatorMutex       sync.RWMutex
	getDocumentInvalidatorArgsForCall []struct {
		channelID string
		namespace string
	}
	getDocumentInvalidatorReturns struct {
		result1 doccache.Invalidator
		result2 error
	}
	getDocumentInvalidatorReturnsOnCall map[int]struct {
		result1 doccache.Invalidator
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DocCacheInvalidatorProvider) GetDocumentInvalidator(channelID string, namespace string) (doccache.Invalidator, error) {
	fake.getDocumentInvalidatorMutex.Lock()
	ret, specificReturn := fake.getDocumentInvalidatorReturnsOnCall[len(fake.getDocumentInvalidatorArgsForCall)]
	fake.getDocumentInvalidatorArgsForCall = append(fake.getDocumentInvalidatorArgsForCall, struct {
		channelID string
		namespace string
	}{channelID, namespace})
	fake.recordInvocation("GetDocumentInvalidator", []interface{}{channelID, namespace})
	fake.getDocumentInvalidatorMutex.Unlock()
	if fake.GetDocumentInvalidatorStub != nil {
		return fake.GetDocumentInvalidatorStub(channelID, namespace)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDocumentInvalidatorReturns.result1, fake.getDocumentInvalidatorReturns.result2
}

func (fake *DocCacheInvalidatorProvider) GetDocumentInvalidatorCallCount() int {
	fake.getDocumentInvalidatorMutex.RLock()
	defer fake.getDocumentInvalidatorMutex.RUnlock()
	return len(fake.getDocumentInvalidatorArgsForCall)
}

func (fake *DocCacheInvalidatorProvider) GetDocumentInvalidatorArgsForCall(i int) (string, string) {
	fake.getDocumentInvalidatorMutex.RLock()
	defer fake.getDocumentInvalidatorMutex.RUnlock()
	return fake.getDocumentInvalidatorArgsForCall[i].channelID, fake.getDocumentInvalidatorArgsForCall[i].namespace
}

func (fake *DocCacheInvalidatorProvider) GetDocumentInvalidatorReturns(result1 doccache.Invalidator, result2 error) {
	fake.GetDocumentInvalidatorStub = nil
	fake.getDocumentInvalidatorReturns = struct {
		result1 doccache.Invalidator
		result2 error
	}{result1, result2}
}

func (fake *DocCacheInvalidatorProvider) GetDocumentInvalidatorReturnsOnCall(i int, result1 doccache.Invalidator, result2 error) {
	fake.GetDocumentInvalidatorStub = nil
	if fake.getDocumentInvalidatorReturnsOnCall == nil {
		fake.getDocumentInvalidatorReturnsOnCall = make(map[int]struct {
			result1 doccache.Invalidator
			result2 error
		})
	}
	fake.getDocumentInvalidatorReturnsOnCall[i] = struct {
		result1 doccache.Invalidator
		result2 error
	}{result1, result2}
}

func (fake *DocCacheInvalidatorProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getDocumentInvalidatorMutex.RLock()
	defer fake.getDocumentInvalidatorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DocCacheInvalidatorProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
