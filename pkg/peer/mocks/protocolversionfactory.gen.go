// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	casApi "github.com/trustbloc/sidetree-core-go/pkg/api/cas"
	protocolApi "github.com/trustbloc/sidetree-core-go/pkg/api/protocol"
	"github.com/trustbloc/sidetree-fabric/pkg/context/common"
	"github.com/trustbloc/sidetree-fabric/pkg/rest/sidetreehandler"
)

type ProtocolVersionFactory struct {
	CreateProtocolVersionStub        func(version string, p protocolApi.Protocol, casClient casApi.Client, opStore common.OperationStore, docType sidetreehandler.DocumentType) (protocolApi.Version, error)
	createProtocolVersionMutex       sync.RWMutex
	createProtocolVersionArgsForCall []struct {
		version   string
		p         protocolApi.Protocol
		casClient casApi.Client
		opStore   common.OperationStore
		docType   sidetreehandler.DocumentType
	}
	createProtocolVersionReturns struct {
		result1 protocolApi.Version
		result2 error
	}
	createProtocolVersionReturnsOnCall map[int]struct {
		result1 protocolApi.Version
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProtocolVersionFactory) CreateProtocolVersion(version string, p protocolApi.Protocol, casClient casApi.Client, opStore common.OperationStore, docType sidetreehandler.DocumentType) (protocolApi.Version, error) {
	fake.createProtocolVersionMutex.Lock()
	ret, specificReturn := fake.createProtocolVersionReturnsOnCall[len(fake.createProtocolVersionArgsForCall)]
	fake.createProtocolVersionArgsForCall = append(fake.createProtocolVersionArgsForCall, struct {
		version   string
		p         protocolApi.Protocol
		casClient casApi.Client
		opStore   common.OperationStore
		docType   sidetreehandler.DocumentType
	}{version, p, casClient, opStore, docType})
	fake.recordInvocation("CreateProtocolVersion", []interface{}{version, p, casClient, opStore, docType})
	fake.createProtocolVersionMutex.Unlock()
	if fake.CreateProtocolVersionStub != nil {
		return fake.CreateProtocolVersionStub(version, p, casClient, opStore, docType)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createProtocolVersionReturns.result1, fake.createProtocolVersionReturns.result2
}

func (fake *ProtocolVersionFactory) CreateProtocolVersionCallCount() int {
	fake.createProtocolVersionMutex.RLock()
	defer fake.createProtocolVersionMutex.RUnlock()
	return len(fake.createProtocolVersionArgsForCall)
}

func (fake *ProtocolVersionFactory) CreateProtocolVersionArgsForCall(i int) (string, protocolApi.Protocol, casApi.Client, common.OperationStore, sidetreehandler.DocumentType) {
	fake.createProtocolVersionMutex.RLock()
	defer fake.createProtocolVersionMutex.RUnlock()
	return fake.createProtocolVersionArgsForCall[i].version, fake.createProtocolVersionArgsForCall[i].p, fake.createProtocolVersionArgsForCall[i].casClient, fake.createProtocolVersionArgsForCall[i].opStore, fake.createProtocolVersionArgsForCall[i].docType
}

func (fake *ProtocolVersionFactory) CreateProtocolVersionReturns(result1 protocolApi.Version, result2 error) {
	fake.CreateProtocolVersionStub = nil
	fake.createProtocolVersionReturns = struct {
		result1 protocolApi.Version
		result2 error
	}{result1, result2}
}

func (fake *ProtocolVersionFactory) CreateProtocolVersionReturnsOnCall(i int, result1 protocolApi.Version, result2 error) {
	fake.CreateProtocolVersionStub = nil
	if fake.createProtocolVersionReturnsOnCall == nil {
		fake.createProtocolVersionReturnsOnCall = make(map[int]struct {
			result1 protocolApi.Version
			result2 error
		})
	}
	fake.createProtocolVersionReturnsOnCall[i] = struct {
		result1 protocolApi.Version
		result2 error
	}{result1, result2}
}

func (fake *ProtocolVersionFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createProtocolVersionMutex.RLock()
	defer fake.createProtocolVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProtocolVersionFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
