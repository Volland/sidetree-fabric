// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-core-go/pkg/api/cas"
	"github.com/trustbloc/sidetree-core-go/pkg/api/protocol"
	"github.com/trustbloc/sidetree-fabric/pkg/config"
	"github.com/trustbloc/sidetree-fabric/pkg/context/common"
)

type ProtocolVersionFactory struct {
	CreateProtocolVersionStub        func(string, protocol.Protocol, cas.Client, common.OperationStore, string, config.Sidetree) (protocol.Version, error)
	createProtocolVersionMutex       sync.RWMutex
	createProtocolVersionArgsForCall []struct {
		arg1 string
		arg2 protocol.Protocol
		arg3 cas.Client
		arg4 common.OperationStore
		arg5 string
		arg6 config.Sidetree
	}
	createProtocolVersionReturns struct {
		result1 protocol.Version
		result2 error
	}
	createProtocolVersionReturnsOnCall map[int]struct {
		result1 protocol.Version
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProtocolVersionFactory) CreateProtocolVersion(arg1 string, arg2 protocol.Protocol, arg3 cas.Client, arg4 common.OperationStore, arg5 string, arg6 config.Sidetree) (protocol.Version, error) {
	fake.createProtocolVersionMutex.Lock()
	ret, specificReturn := fake.createProtocolVersionReturnsOnCall[len(fake.createProtocolVersionArgsForCall)]
	fake.createProtocolVersionArgsForCall = append(fake.createProtocolVersionArgsForCall, struct {
		arg1 string
		arg2 protocol.Protocol
		arg3 cas.Client
		arg4 common.OperationStore
		arg5 string
		arg6 config.Sidetree
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.recordInvocation("CreateProtocolVersion", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.createProtocolVersionMutex.Unlock()
	if fake.CreateProtocolVersionStub != nil {
		return fake.CreateProtocolVersionStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createProtocolVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ProtocolVersionFactory) CreateProtocolVersionCallCount() int {
	fake.createProtocolVersionMutex.RLock()
	defer fake.createProtocolVersionMutex.RUnlock()
	return len(fake.createProtocolVersionArgsForCall)
}

func (fake *ProtocolVersionFactory) CreateProtocolVersionCalls(stub func(string, protocol.Protocol, cas.Client, common.OperationStore, string, config.Sidetree) (protocol.Version, error)) {
	fake.createProtocolVersionMutex.Lock()
	defer fake.createProtocolVersionMutex.Unlock()
	fake.CreateProtocolVersionStub = stub
}

func (fake *ProtocolVersionFactory) CreateProtocolVersionArgsForCall(i int) (string, protocol.Protocol, cas.Client, common.OperationStore, string, config.Sidetree) {
	fake.createProtocolVersionMutex.RLock()
	defer fake.createProtocolVersionMutex.RUnlock()
	argsForCall := fake.createProtocolVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *ProtocolVersionFactory) CreateProtocolVersionReturns(result1 protocol.Version, result2 error) {
	fake.createProtocolVersionMutex.Lock()
	defer fake.createProtocolVersionMutex.Unlock()
	fake.CreateProtocolVersionStub = nil
	fake.createProtocolVersionReturns = struct {
		result1 protocol.Version
		result2 error
	}{result1, result2}
}

func (fake *ProtocolVersionFactory) CreateProtocolVersionReturnsOnCall(i int, result1 protocol.Version, result2 error) {
	fake.createProtocolVersionMutex.Lock()
	defer fake.createProtocolVersionMutex.Unlock()
	fake.CreateProtocolVersionStub = nil
	if fake.createProtocolVersionReturnsOnCall == nil {
		fake.createProtocolVersionReturnsOnCall = make(map[int]struct {
			result1 protocol.Version
			result2 error
		})
	}
	fake.createProtocolVersionReturnsOnCall[i] = struct {
		result1 protocol.Version
		result2 error
	}{result1, result2}
}

func (fake *ProtocolVersionFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createProtocolVersionMutex.RLock()
	defer fake.createProtocolVersionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProtocolVersionFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
