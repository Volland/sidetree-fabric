// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	ctxcommon "github.com/trustbloc/sidetree-fabric/pkg/context/common"
)

type ProtocolClientChannelProvider struct {
	ProtocolClientProviderForChannelStub        func(channelID string) (ctxcommon.ProtocolClientProvider, error)
	protocolClientProviderForChannelMutex       sync.RWMutex
	protocolClientProviderForChannelArgsForCall []struct {
		channelID string
	}
	protocolClientProviderForChannelReturns struct {
		result1 ctxcommon.ProtocolClientProvider
		result2 error
	}
	protocolClientProviderForChannelReturnsOnCall map[int]struct {
		result1 ctxcommon.ProtocolClientProvider
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ProtocolClientChannelProvider) ProtocolClientProviderForChannel(channelID string) (ctxcommon.ProtocolClientProvider, error) {
	fake.protocolClientProviderForChannelMutex.Lock()
	ret, specificReturn := fake.protocolClientProviderForChannelReturnsOnCall[len(fake.protocolClientProviderForChannelArgsForCall)]
	fake.protocolClientProviderForChannelArgsForCall = append(fake.protocolClientProviderForChannelArgsForCall, struct {
		channelID string
	}{channelID})
	fake.recordInvocation("ProtocolClientProviderForChannel", []interface{}{channelID})
	fake.protocolClientProviderForChannelMutex.Unlock()
	if fake.ProtocolClientProviderForChannelStub != nil {
		return fake.ProtocolClientProviderForChannelStub(channelID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.protocolClientProviderForChannelReturns.result1, fake.protocolClientProviderForChannelReturns.result2
}

func (fake *ProtocolClientChannelProvider) ProtocolClientProviderForChannelCallCount() int {
	fake.protocolClientProviderForChannelMutex.RLock()
	defer fake.protocolClientProviderForChannelMutex.RUnlock()
	return len(fake.protocolClientProviderForChannelArgsForCall)
}

func (fake *ProtocolClientChannelProvider) ProtocolClientProviderForChannelArgsForCall(i int) string {
	fake.protocolClientProviderForChannelMutex.RLock()
	defer fake.protocolClientProviderForChannelMutex.RUnlock()
	return fake.protocolClientProviderForChannelArgsForCall[i].channelID
}

func (fake *ProtocolClientChannelProvider) ProtocolClientProviderForChannelReturns(result1 ctxcommon.ProtocolClientProvider, result2 error) {
	fake.ProtocolClientProviderForChannelStub = nil
	fake.protocolClientProviderForChannelReturns = struct {
		result1 ctxcommon.ProtocolClientProvider
		result2 error
	}{result1, result2}
}

func (fake *ProtocolClientChannelProvider) ProtocolClientProviderForChannelReturnsOnCall(i int, result1 ctxcommon.ProtocolClientProvider, result2 error) {
	fake.ProtocolClientProviderForChannelStub = nil
	if fake.protocolClientProviderForChannelReturnsOnCall == nil {
		fake.protocolClientProviderForChannelReturnsOnCall = make(map[int]struct {
			result1 ctxcommon.ProtocolClientProvider
			result2 error
		})
	}
	fake.protocolClientProviderForChannelReturnsOnCall[i] = struct {
		result1 ctxcommon.ProtocolClientProvider
		result2 error
	}{result1, result2}
}

func (fake *ProtocolClientChannelProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.protocolClientProviderForChannelMutex.RLock()
	defer fake.protocolClientProviderForChannelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ProtocolClientChannelProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
