// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-chaincode-go/shim"
	dcasclient "github.com/trustbloc/fabric-peer-ext/pkg/collections/offledger/dcas/client"
)

type DCASStubWrapperFactory struct {
	CreateDCASClientStubWrapperStub        func(coll string, stub shim.ChaincodeStubInterface) (dcasclient.DCAS, error)
	createDCASClientStubWrapperMutex       sync.RWMutex
	createDCASClientStubWrapperArgsForCall []struct {
		coll string
		stub shim.ChaincodeStubInterface
	}
	createDCASClientStubWrapperReturns struct {
		result1 dcasclient.DCAS
		result2 error
	}
	createDCASClientStubWrapperReturnsOnCall map[int]struct {
		result1 dcasclient.DCAS
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DCASStubWrapperFactory) CreateDCASClientStubWrapper(coll string, stub shim.ChaincodeStubInterface) (dcasclient.DCAS, error) {
	fake.createDCASClientStubWrapperMutex.Lock()
	ret, specificReturn := fake.createDCASClientStubWrapperReturnsOnCall[len(fake.createDCASClientStubWrapperArgsForCall)]
	fake.createDCASClientStubWrapperArgsForCall = append(fake.createDCASClientStubWrapperArgsForCall, struct {
		coll string
		stub shim.ChaincodeStubInterface
	}{coll, stub})
	fake.recordInvocation("CreateDCASClientStubWrapper", []interface{}{coll, stub})
	fake.createDCASClientStubWrapperMutex.Unlock()
	if fake.CreateDCASClientStubWrapperStub != nil {
		return fake.CreateDCASClientStubWrapperStub(coll, stub)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDCASClientStubWrapperReturns.result1, fake.createDCASClientStubWrapperReturns.result2
}

func (fake *DCASStubWrapperFactory) CreateDCASClientStubWrapperCallCount() int {
	fake.createDCASClientStubWrapperMutex.RLock()
	defer fake.createDCASClientStubWrapperMutex.RUnlock()
	return len(fake.createDCASClientStubWrapperArgsForCall)
}

func (fake *DCASStubWrapperFactory) CreateDCASClientStubWrapperArgsForCall(i int) (string, shim.ChaincodeStubInterface) {
	fake.createDCASClientStubWrapperMutex.RLock()
	defer fake.createDCASClientStubWrapperMutex.RUnlock()
	return fake.createDCASClientStubWrapperArgsForCall[i].coll, fake.createDCASClientStubWrapperArgsForCall[i].stub
}

func (fake *DCASStubWrapperFactory) CreateDCASClientStubWrapperReturns(result1 dcasclient.DCAS, result2 error) {
	fake.CreateDCASClientStubWrapperStub = nil
	fake.createDCASClientStubWrapperReturns = struct {
		result1 dcasclient.DCAS
		result2 error
	}{result1, result2}
}

func (fake *DCASStubWrapperFactory) CreateDCASClientStubWrapperReturnsOnCall(i int, result1 dcasclient.DCAS, result2 error) {
	fake.CreateDCASClientStubWrapperStub = nil
	if fake.createDCASClientStubWrapperReturnsOnCall == nil {
		fake.createDCASClientStubWrapperReturnsOnCall = make(map[int]struct {
			result1 dcasclient.DCAS
			result2 error
		})
	}
	fake.createDCASClientStubWrapperReturnsOnCall[i] = struct {
		result1 dcasclient.DCAS
		result2 error
	}{result1, result2}
}

func (fake *DCASStubWrapperFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDCASClientStubWrapperMutex.RLock()
	defer fake.createDCASClientStubWrapperMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DCASStubWrapperFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
